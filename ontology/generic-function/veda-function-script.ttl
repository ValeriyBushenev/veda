@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix vdi: <http://semantic-machines.com/veda/veda-index/> .

<http://semantic-machines.com/veda/veda-function-script>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология  скриптов системы Veda"@ru ;
  rdfs:label "Veda system scripts ontology"@en ;
#  owl:versionInfo "1.3" ;
  v-s:loadPriority 7 ;
.

# --------------------------User scripts--------------------------------

v-s:UserScript
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:UserThing ;
  rdfs:label "Пользовательский скрипт"@ru ;
  rdfs:label "User script"@en ;
  v-ui:hasTemplate v-s:UserScriptTemplate ;
.

v-s:output
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Вывод"@ru ;
  rdfs:label "Output"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:string ;
.

v-s:toBeRun
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Выполнить"@ru ;
  rdfs:label "To be run"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:range xsd:boolean ;
.

v-s:lastRun
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Последний запуск"@ru ;
  rdfs:label "Last run"@en ;
  rdfs:domain v-s:UserScript ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:dateTime ;
.

v-s:PsRunAtUserScript
  rdf:type v-ui:DatatypePropertySpecification ;
  rdfs:label "Спецификация свойства v-s:runAt для класса v-s:UserScript"@ru ;
  rdfs:label "v-s:runAt property specification for v-s:UserScript class"@en ;
  v-ui:forClass v-s:UserScript ;
  v-ui:forProperty v-s:runAt ;
  v-ui:minCardinality 1 ;
  v-ui:maxCardinality 1 ;
  v-ui:defaultValue "Browser" ;
  v-ui:optionValue "Browser" ;
  v-ui:optionValue "Server" ;
.

v-s:UserScriptEvent
  rdf:type v-s:Event ;
  v-s:triggerByType v-s:UserScript ;
  v-s:preventByType v-s:Operation ;
#  v-s:runAt "V8.LowPriority" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
var toBeRun = document["v-s:toBeRun"] && document["v-s:toBeRun"][0] && document["v-s:toBeRun"][0].data ;
var runAt = document["v-s:runAt"] && document["v-s:runAt"][0] && document["v-s:runAt"][0].data ;
var script = document["v-s:script"] && document["v-s:script"][0] && document["v-s:script"][0].data;

if (!script || !toBeRun || runAt !== "Server") { return; }

// preserve global print & console
var nativePrint = this.print;
var nativeConsole = this.console;

// override global print & console
var output = "";
var _print = function () {
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i] ;
    var argString = typeof arg !== "undefined" ? arg.toString() : "undefined" ;
    if (i === 0) {
      output += argString;
    } else {
      output += " " + argString;
    }
  }
  output += String.fromCharCode(13, 10);
}
this.print = _print;

var _console = {
  log: _print,
  error: _print,
  info: _print,
  time: function (timer) {
    this[timer] = new Date();
  },
  timeEnd: function (timer) {
    var delta = new Date() - this[timer];
    this.log(timer, delta, "msec");
  }
};
this.console = _console;

script = new Function (script);
try {
  script();
} catch (err) {
  print(err, err.stack);
}
document["v-s:output"] = [{
  data: output,
  lang: "NONE",
  type: "String"
}];
document["v-s:lastRun"] = [{
  data: new Date(),
  type: "Datetime"
}];
delete document["v-s:toBeRun"];
put_individual(ticket, document, _event_id);

// restore global print & console
this.print = nativePrint;
this.console = nativeConsole;
"""
.

v-s:RunBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Запустить"@ru ;
  rdfs:label "Run"@en ;
.
v-s:ClearBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Очистить"@ru ;
  rdfs:label "Clear"@en ;
.

v-s:UserScriptTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:UserScript ;
  rdfs:label "Шаблон для класса v-s:UserScript"@ru ;
  rdfs:label "Template for v-s:UserScript class"@en ;
  v-ui:template """
<div class="container sheet">
  <div about="@" data-embedded="true" data-template="v-ui:CommonOntologyTemplate"></div>
  <div class="row">
    <div class="col-md-2 view -edit -search">
      <em about="v-s:lastRun" property="rdfs:label"></em>
      <div about="@" property="v-s:lastRun"></div>
    </div>
    <div class="col-md-2 view -edit -search">
      <em about="v-s:updateCounter" property="rdfs:label"></em>
      <div about="@" property="v-s:updateCounter"></div>
    </div>
    <div class="col-md-2 view -edit -search">
      <div class="checkbox">
        <label>
          <veda-control property="v-s:toBeRun" data-type="boolean"></veda-control>
          <em about="v-s:toBeRun" property="rdfs:label"></em>
        </label>
      </div>
    </div>
    <div class="col-md-2 view edit -search">
      <em about="v-s:runAt" property="rdfs:label"></em>
      <div property="v-s:runAt" class="view -edit -search"></div>
      <veda-control property="v-s:runAt" data-type="radio" class="-view edit search"></veda-control>
    </div>
  </div>
  <hr>
  <div class="row">
    <div class="col-md-6">
      <em about="v-s:script" property="rdfs:label" class="view edit -search"></em>
      <veda-control property="v-s:script" data-type="source" class="view edit -search"></veda-control>
    </div>
    <div class="col-md-6">
      <em about="v-s:output" property="rdfs:label" class="view edit -search"></em>
      <pre about="@" property="v-s:output" class="view edit -search" style="height:300px; overflow:auto"></pre>
    </div>
  </div>

  <hr>
  <div about="@" data-template="v-ui:SystemPropertiesTemplate" data-embedded="true"></div>
  <br>
  <div class="actions view edit -search clearfix">
    <span about="@" data-template="v-ui:StandardButtonsTemplate" data-embedded="true" data-buttons="edit save cancel delete destroy"></span>
    <div class="pull-right">
      <button type="button" class="action btn btn-warning view -edit -search" id="run" about="v-s:RunBundle" property="rdfs:label"/>
      <button type="button" class="action btn btn-default -view edit -search" id="clear" about="v-s:ClearBundle" property="rdfs:label"/>
    </div>
  </div>

</div>
<script>
  // Clear output on save
  individual.on("beforeSave", clearOutput);
  template.one("remove", function () {
    individual.off("beforeSave", clearOutput);
  });
  function clearOutput () {
    this["v-s:output"] = [];
  }

  var nativeConsole = window.console;
  var nativePrint = window.print;
  var _print = function () {
    var output = individual["v-s:output"][0] || "";
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i] ;
      var argString = typeof arg !== "undefined" ? arg.toString() : "undefined" ;
      if (i === 0) {
        output += argString;
      } else {
        output += " " + argString;
      }
    }
    output += String.fromCharCode(13, 10);
    individual["v-s:output"] = [output];
  }
  var _console = {
    log: _print,
    error: _print,
    info: _print,
    time: function (timer) {
      this[timer] = new Date();
    },
    timeEnd: function (timer) {
      var delta = new Date() - this[timer];
      this.log(timer, delta, "msec");
    }
  };

  window.console = _console;
  window.print = _print;
  template.one("remove", function () {
    window.console = nativeConsole;
    window.print = nativePrint;
  });

  $(".action#run", template).click(function () {
    if ( individual.hasValue("v-s:runAt", "Server") ) {
      individual["v-s:toBeRun"] = [ true ];
      individual.save();
    } else {
      individual["v-s:lastRun"] = [ new Date() ];
      individual["v-s:output"] = [];
      var script = new Function("veda", individual["v-s:script"][0] || "return;");
      try {
        script(veda);
      } catch (err) {
        print(err);
      }
    }
  });
  $(".action#clear", template).click(function () {
    individual["v-s:output"] = [];
  });

  //# sourceURL=v-s:UserScriptTemplate_post
</script>
  """
.

# --------------------------User operations-----------------------------

v-s:Operation
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:UserThing ;
  rdfs:subClassOf v-s:Temporal ;
  rdfs:label "Операция"@ru ;
  rdfs:label "Operation"@en ;
  v-ui:hasTemplate v-s:OperationTemplate ;
.

v-s:StopBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Остановить"@ru ;
  rdfs:label "Stop"@en ;
.

v-s:OperationTemplate
  rdf:type v-ui:ClassTemplate ;
  v-ui:forClass v-s:Operation ;
  rdfs:label "Шаблон для класса v-s:Operation"@ru ;
  rdfs:label "Template for v-s:Operation class"@en ;
  v-ui:template """
<div class="container sheet">
  <div about="@" data-embedded="true" data-template="v-ui:CommonOntologyTemplate"></div>
  <div class="row">
    <div class="col-md-4">
      <div>
        <strong about="v-s:hasStatus" property="rdfs:label"></strong> <span about="@" rel="v-s:hasStatus" data-template="v-ui:StatusTemplate"></span>
      </div>
      <div>
        <strong about="v-s:progress" property="rdfs:label"></strong> <span about="@" property="v-s:progress"></span><span>%</span>
      </div>
      <div>
        <strong about="v-s:dateFrom" property="rdfs:label"></strong> <span about="@" property="v-s:dateFrom"></span>
      </div>
      <div>
        <strong about="v-s:duration" property="rdfs:label"></strong> <span about="@" property="v-s:duration"></span> <span>sec</span>
      </div>
      <div>
        <strong about="v-s:inputQuery" property="rdfs:label"></strong> <span about="@" property="v-s:inputQuery" class="view -edit -search"></span>
        <veda-control data-type="string" property="v-s:inputQuery" class="-view edit search margin-sm"></veda-control>
      </div>
      <div>
        <strong about="v-s:input" property="rdfs:label"></strong>
        <ul rel="v-s:input" class="view edit search" data-limit="5" data-more="true">
          <li about="@" data-template="v-ui:LabelTemplate"></li>
        </ul>
        <veda-control data-type="link" rel="v-s:input" class="-view edit search fulltext margin-sm"></veda-control>
      </div>
      <div>
        <strong about="v-s:inputCursor" property="rdfs:label"></strong> <span about="@" property="v-s:inputCursor"></span>
      </div>
    </div>
    <div class="col-md-8">
      <em about="v-s:output" property="rdfs:label" class="view edit -search"></em>
      <pre about="@" property="v-s:output" class="view edit -search" style="height:300px; overflow:auto"></pre>
    </div>
  </div>
  <hr>
  <div about="@" data-template="v-ui:SystemPropertiesTemplate" data-embedded="true"></div>
  <br>
  <div class="actions view edit -search clearfix">
    <div class="pull-right">
      <button type="button" class="action btn btn-success view -edit -search" id="run" about="v-s:RunBundle" property="rdfs:label"/>
      <button type="button" class="action btn btn-danger view -edit -search" id="stop" about="v-s:StopBundle" property="rdfs:label"/>
      <button type="button" class="action btn btn-default -view edit -search" id="clear" about="v-s:ClearBundle" property="rdfs:label"/>
    </div>
    <span about="@" data-template="v-ui:StandardButtonsTemplate" data-embedded="true" data-buttons="edit save cancel delete destroy"></span>
  </div>
</div>
<script>
  $(".action#run", template).click(function () {
    set_in_individual(veda.ticket, {
      "@": individual.id,
      "v-s:hasStatus": [{
        type: "Uri",
        data: "v-s:StatusStarted"
      }]
    });
  });
  $(".action#stop", template).click(function () {
    set_in_individual(veda.ticket, {
      "@": individual.id,
      "v-s:hasStatus": [{
        type: "Uri",
        data: "v-s:StatusStopped"
      }]
    });
  });
  $(".action#clear", template).click(function () {
    set_in_individual(veda.ticket, {
      "@": individual.id,
      "v-s:output": [{
        type: "String",
        data: ""
      }]
    });
  });

  statusHandler();
  individual.on("v-s:hasStatus", statusHandler);
  template.one("remove", function () {
    individual.off("v-s:hasStatus", statusHandler);
  });
  individual.on("v-s:hasStatus", statusHandler);

  function statusHandler () {
    if (
      individual.hasValue("v-s:hasStatus", "v-s:StatusStarted")
      || individual.hasValue("v-s:hasStatus", "v-s:StatusPostponed")
      || individual.hasValue("v-s:hasStatus", "v-s:StatusExecution")
    ) {
      $(".action#run", template).attr("disabled", "disabled");
      $(".action#stop", template).removeAttr("disabled", "disabled");
    } else if (
      !individual.hasValue("v-s:hasStatus")
      || individual.hasValue("v-s:hasStatus", "v-s:StatusExecuted")
      || individual.hasValue("v-s:hasStatus", "v-s:StatusStopped")
    ) {
      $(".action#run", template).removeAttr("disabled", "disabled");
      $(".action#stop", template).attr("disabled", "disabled");
    }
  }

//# sourceURL=v-s:OperationTemplate_post
</script>
  """ ;
.

# v-s:dateFrom
# v-s:dateTo
# v-s:duration
# v-s:hasStatus
# v-s:output

v-s:inputQuery
  rdf:type owl:DatatypeProperty ;
  rdfs:label "Входной запрос"@ru ;
  rdfs:label "Input query"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:string ;
.

v-s:input
  rdf:type rdf:Property ;
  rdfs:label "Вход"@ru ;
  rdfs:label "Input"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range rdfs:Resource ;
.

v-s:inputCursor
  rdf:type rdf:Property ;
  rdfs:label "Указатель входа"@ru ;
  rdfs:label "Input cursor"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:integer ;
.

v-s:progress
  rdf:type rdf:Property ;
  rdfs:label "Прогресс"@ru ;
  rdfs:label "Progress"@en ;
  rdfs:domain v-s:Operation ;
  rdfs:range xsd:integer ;
.

v-s:OperationTest
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:Operation ;
  rdfs:label "Класс тестовой операций"@ru ;
  rdfs:label "Test operation class"@en ;
  v-ui:hasModel v-s:OperationTestModel ;
  v-ui:hasTemplate v-s:OperationTemplate ;
.

v-s:OperationTestModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель класса операций тест"@ru ;
  rdfs:label "Test operation class model"@en ;
  v-s:script """
this.fn = function (individual) {
  individual.isSync(false);
  individual.save();
};
  """ ;
.

v-s:OperationTest1
  rdf:type v-s:OperationTest ;
  rdfs:label "Тестовая операция 1"@ru ;
  rdfs:label "Test operation 1"@en ;
  rdfs:comment "Тестовая операция 1 комментарий"@ru ;
  rdfs:comment "Test operation 1 comment"@en ;
#  v-s:inputQuery "'rdf:type' == 'v-s:Person'  && 'rdfs:label' == 'Дмитр*'" ;
  v-s:inputQuery "'*'=='owl*' || '*'=='rdf*'" ;
.

v-s:OperationEvent
  rdf:type v-s:Event ;
  v-s:triggerByType v-s:Operation ;
#  v-s:runAt "V8.LowPriority" ;
  v-s:unsafe true ;
  v-s:disabled true ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

var operation = new veda.IndividualModel(document),
    inputQuery = operation["v-s:inputQuery"][0],
    input = operation["v-s:input"],
    inputCursor = operation["v-s:inputCursor"][0] || 0,
    progress = operation["v-s:progress"][0] || 0,
    now = new Date(),
    dateFrom = operation["v-s:dateFrom"][0] || now,
    max_queued = 100,
    to_process = 100;

// Stop execution
if ( !operation.hasValue("v-s:hasStatus") || operation.hasValue("v-s:hasStatus", "v-s:StatusStopped") || operation.hasValue("v-s:hasStatus", "v-s:StatusExecuted") ) {
  return ;
}

// First run with query specified
if ( operation.hasValue("v-s:hasStatus", "v-s:StatusStarted") && operation.hasValue("v-s:inputQuery") && !operation.hasValue("v-s:input") ) {
  var inputUris = query(veda.ticket, inputQuery).result;
  var inputValues = inputUris.map(function (value_uri) {
    return {
      type: "Uri",
      data: value_uri
    };
  });
  set_in_individual(veda.ticket, {
    "@": operation.id,
    "v-s:input": inputValues,
    "v-s:inputCursor": veda.Util.newInt(0),
    "v-s:dateFrom": veda.Util.newDate(now),
    "v-s:hasStatus": inputValues.length ? veda.Util.newUri("v-s:StatusExecution") : veda.Util.newUri("v-s:StatusExecuted")
  });
  return;
}

// Postpone execution at high load
if ( queue_elements_count - queue_elements_processed > max_queued ) {
  console.log("Queue busy", queue_elements_count - queue_elements_processed);
  set_in_individual(veda.ticket, {
    "@": operation.id,
    "v-s:hasStatus": veda.Util.newUri("v-s:StatusExecution"),
    "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 ))
  });
  return;
}


// Execute input portion
for (var i = inputCursor, max = inputCursor + to_process, inputValue; (i < max) && (inputValue = input[i]); i++) {
  try {
    operation.fn(inputValue);
  } catch (error) {
    console.log(i, "Error processing individual", inputValue.id);
    console.log(error, error.stack);
    continue;
  }
}
inputCursor = i;

if (inputCursor > 0 && input.length > 0) {
  progress = Math.floor( (inputCursor / input.length) * 100 ) ;
} else if (inputCursor === 0 && input.length > 0) {
  progress = 0 ;
} else if (inputCursor === 0 && input.length === 0) {
  progress = 100 ;
}

var to_set = {
  "@": operation.id,
  "v-s:hasStatus": veda.Util.newUri("v-s:StatusExecution"),
  "v-s:progress": veda.Util.newInt(progress),
  "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 )),
  "v-s:inputCursor": veda.Util.newInt(inputCursor),
};
if (progress === 100) {
  to_set["v-s:hasStatus"] = veda.Util.newUri("v-s:StatusExecuted");
}
set_in_individual(veda.ticket, to_set);
"""
.

v-s:OperationEvent2
  rdf:type v-s:Event ;
  v-s:triggerByType v-s:Operation ;
#  v-s:runAt "V8.LowPriority" ;
  v-s:unsafe true ;
#  v-s:disabled true ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

console.log("@0");

var operation = document,
    inputQuery = operation["v-s:inputQuery"] && operation["v-s:inputQuery"][0].data || "",
    input = operation["v-s:input"],
    inputCursor = operation["v-s:inputCursor"] && operation["v-s:inputCursor"][0].data || 0,
    progress = operation["v-s:progress"] && operation["v-s:progress"][0].data || 0,
    status = operation["v-s:hasStatus"] && operation["v-s:hasStatus"][0].data || "",
    now = new Date(),
    dateFrom = operation["v-s:dateFrom"] && operation["v-s:dateFrom"][0].data || now,
    operation_type_uri = operation["rdf:type"][0].data,
    operation_type = get_individual(veda.ticket, operation_type_uri),
    operation_model_uri = operation_type["v-ui:hasModel"][0].data,
    operation_model = get_individual(veda.ticket, operation_model_uri),
    operation_model_src = operation_model["v-s:script"][0].data,
    max_queued = 100,
    to_process = 100;


// Stop execution
if ( !status || status === "v-s:StatusStopped" || status === "v-s:StatusExecuted" ) {
  return ;
}

console.log("@1");

// First run with query specified
if ( status === "v-s:StatusStarted" && inputQuery && !input ) {
  console.log("@2");
  var inputUris = query(veda.ticket, inputQuery).result;
  console.log("@3");
  var inputValues = inputUris.map(function (value_uri) {
    return {
      type: "Uri",
      data: value_uri
    };
  });
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:input": inputValues,
    "v-s:inputCursor": veda.Util.newInt(0),
    "v-s:dateFrom": veda.Util.newDate(now),
    "v-s:hasStatus": inputValues.length ? veda.Util.newUri("v-s:StatusExecution") : veda.Util.newUri("v-s:StatusExecuted")
  });
  console.log("@4");
  return;
}

// Postpone execution at high load
if ( queue_elements_count - queue_elements_processed > max_queued ) {
  console.log("Queue busy", queue_elements_count - queue_elements_processed);
  set_in_individual(veda.ticket, {
    "@": operation["@"],
    "v-s:hasStatus": veda.Util.newUri("v-s:StatusExecution"),
    "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 ))
  });
  return;
}

// Execute input portion
var operation_model_fn = new Function(operation_model_src);
operation_model_fn.call(operation);

for (var i = inputCursor, max = inputCursor + to_process, inputValue; (i < max) && (inputValue = input[i]); i++) {
  try {
    operation.fn(inputValue);
  } catch (error) {
    console.log(i, "Error processing individual", inputValue.id);
    console.log(error, error.stack);
    continue;
  }
}
inputCursor = i;

if (inputCursor > 0 && input.length > 0) {
  progress = Math.floor( (inputCursor / input.length) * 100 ) ;
} else if (inputCursor === 0 && input.length > 0) {
  progress = 0 ;
} else if (inputCursor === 0 && input.length === 0) {
  progress = 100 ;
}

var to_set = {
  "@": operation["@"],
  "v-s:hasStatus": veda.Util.newUri("v-s:StatusExecution"),
  "v-s:progress": veda.Util.newInt(progress),
  "v-s:duration": veda.Util.newInt(Math.round( (now - dateFrom) / 1000 )),
  "v-s:inputCursor": veda.Util.newInt(inputCursor),
};
if (progress === 100) {
  to_set["v-s:hasStatus"] = veda.Util.newUri("v-s:StatusExecuted");
}
set_in_individual(veda.ticket, to_set);
"""
.
