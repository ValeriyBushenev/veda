@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .

@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
<http://semantic-machines.com/veda/veda-function-create>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология функции 'Создать' системы Веда"@ru ;
  rdfs:label "Veda system function 'Create' ontology"@en ;
#  owl:versionInfo "0.2" ;
  v-s:loadPriority 9 ;
.

########## CREATE FUNCTION ###########

v-fc:Create
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:Function ;
  rdfs:label "Создать"@ru ;
  rdfs:label "Create"@en ;
  v-ui:hasTemplate v-fc:CreateManagementTemplate ;
.
v-fc:PersonalCreate
  rdf:type owl:Class ;
  rdfs:subClassOf v-fc:Create ;
  rdfs:label "Создать"@ru ;
  rdfs:label "Create"@en ;
  v-ui:hasTemplate v-fc:CreateManagementTemplate ;
.
v-fc:Blank
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:Function ;
  rdfs:label "Бланк"@ru ;
  rdfs:label "Blank"@en ;
  v-ui:hasModel v-fc:BlankModel ;
  v-ui:hasTemplate v-fc:BlankTemplate ;
.
v-fc:CreateByType
  rdf:type v-fc:Create ;
  rdfs:label "Создать"@ru ;
  rdfs:label "Create"@en ;
  v-ui:hasTemplate v-fc:CreateByTypeTemplate ;
.
v-fc:CreateByBlank
  rdf:type v-fc:Create ;
  rdfs:label "Создать"@ru ;
  rdfs:label "Create"@en ;
  v-ui:hasTemplate v-fc:CreateByBlankTemplate ;
.
v-fc:ChooseType
  rdf:type v-s:Bundle ;
  rdfs:label "Выберите тип объекта"@ru ;
  rdfs:label "Choose a type to create"@en ;
.
v-fc:ChooseBlank
  rdf:type v-s:Bundle ;
  rdfs:label "Выберите бланк"@ru ;
  rdfs:label "Choose a blank"@en ;
.
v-fc:CreateBundle
  rdf:type v-s:Bundle ;
  rdfs:label "Создание"@ru ;
  rdfs:label "Create"@en ;
.
v-fc:targetType
  rdf:type owl:ObjectProperty ;
  rdfs:label "Тип"@ru ;
  rdfs:label "Type"@en ;
  rdfs:domain v-fc:Blank ;
  rdfs:domain v-fc:Create ;
  rdfs:range owl:Class ;
  rdfs:range rdfs:Class ;
.
v-fc:targetBlank
  rdf:type owl:ObjectProperty ;
  rdfs:label "Тип"@ru ;
  rdfs:label "Type"@en ;
  rdfs:domain v-fc:Create ;
  rdfs:range v-fc:Blank ;
.
v-fc:hasBlank
  rdf:type owl:ObjectProperty ;
  rdfs:label "Бланк"@ru ;
  rdfs:label "Blank"@en ;
  rdfs:domain v-fc:Create ;
  rdfs:range v-fc:Blank ;
.
v-fc:CreateByBlankTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон для v-fc:CreateByBlank"@ru ;
  rdfs:label "v-fc:CreateByBlank template"@en ;
  v-ui:template """
<div class="container">
  <div class="sheet">
    <h3 about="@" property="rdfs:label"></h3>
    <em about="v-fc:ChooseBlank" property="rdfs:label"></em>
    <veda-control data-type="link" rel="v-fc:targetBlank" class="fulltext dropdown"></veda-control>
  </div>
  <br>
  <div rel="v-fc:targetBlank" data-template="v-fc:BlankTemplate"></div>
</div>
  """
.

v-fc:CreateByTypeTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон для v-fc:CreateByType"@ru ;
  rdfs:label "v-fc:CreateByType template"@en ;
  v-ui:template """
<div class="container">
  <div class="sheet">
    <h3 property="rdfs:label"></h3>
    <em about="v-fc:ChooseType" property="rdfs:label"></em>
    <veda-control rel="v-fc:targetType" data-type="link" class="fulltext dropdown"></veda-control>
  </div>
  <br>
  <div id="holder"></div>
</div>
<script>
  var self = individual;
  function typeHandler(values) {
    var holder = $("#holder", template).empty();
    if (values.length) {
      var blank = new veda.IndividualModel();
      blank["v-fc:targetType"] = values;
      blank["rdf:type"] = [ new veda.IndividualModel("v-fc:Blank") ];
      var renderedTemplate = blank.present(holder, "v-fc:BlankTemplate");
    }
  }
  self.on("v-fc:targetType", typeHandler);
  template.one("remove", function () {
    self.off("v-fc:targetType", typeHandler);
  });
  if (self.hasValue("v-fc:targetType")) {
    typeHandler(self["v-fc:targetType"]);
  }
  //# sourceURL=v-fc:CreateByTypeTemplate_post
</script>
  """
.

v-fc:BlankModel
  rdf:type v-ui:ClassModel ;
  rdfs:label "Модель класса v-fc:Blank"@ru ;
  rdfs:label "v-fc:Blank class model"@en ;
  v-ui:forClass v-fc:Blank ;
  v-s:script """
var self = this;

var stopList = [
  "@",
  "rdf:type",
  "v-s:author",
  "v-s:publisher",
  "v-s:creator",
  "v-s:lastEditor",
  "v-s:created",
  "v-s:edited",
  "v-s:updateCounter",
  "v-s:deleted",
  "rdfs:label",
  "rdfs:isDefinedBy",
  "v-fc:targetType"
];

this.initBlank = function () {
  if (self.object) { return; }
  self.object = new veda.IndividualModel(),
  self.object["rdf:type"] = self["v-fc:targetType"].slice(0);
  Object.getOwnPropertyNames(self.properties).map( function (property_uri) {
    if ( stopList.indexOf(property_uri) >= 0 ) { return; }
    if ( self.hasValue(property_uri) && self.get(property_uri)[0] instanceof veda.IndividualModel && self.get(property_uri)[0].is("v-fc:Blank") ) {
      self.object.set(property_uri, self.get(property_uri).map(function (item) {
        // Embedded blanks are for v-s:Embedded objects only
        // Prevent mutual v-s:parent links
        item.initBlank();
        if ( item.object.is("v-s:Embedded") && property_uri !== "v-s:parent" ) {
          item.object["v-s:parent"] = [ self.object ];
        }
        return item.object;
      }));
    } else {
      self.object.set(property_uri, self.get(property_uri).slice(0));
    }
  });
  self.object.one("afterSave afterReset", function () {
    delete self.object;
  });
}

this.updateBlank = function () {
  var blank = this;
  Object.getOwnPropertyNames(blank.object.properties).map( function (property_uri) {
    if ( stopList.indexOf(property_uri) >= 0 ) { return; }
    if ( blank.object.hasValue(property_uri) && blank.object.get(property_uri)[0] instanceof veda.IndividualModel && blank.object.get(property_uri)[0].is("v-s:Embedded")) {
      blank.set(property_uri, blank.object.get(property_uri).map(function (item) {
        var embeddedBlank = item.clone();
        var types = embeddedBlank["rdf:type"];
        embeddedBlank["v-fc:targetType"] = types;
        embeddedBlank["rdf:type"] = [ new veda.IndividualModel("v-fc:Blank") ];
        embeddedBlank["v-s:parent"] = [ blank ];
        embeddedBlank.save();
        return embeddedBlank;
      }));
    } else {
      blank.set(property_uri, blank.object.get(property_uri).slice(0));
    }
  });
}
//# sourceURL=v-fc:BlankModel
  """
.

v-fc:BlankTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон класса v-fc:Blank"@ru ;
  rdfs:label "V-fc:Blank class template"@en ;
#  v-ui:forClass v-fc:Blank ;
  v-ui:template """
<script>
  individual.initBlank();
</script>
<div>
  <div id="object-container"></div>
  <div id="no-rights" class="alert alert-warning container hidden">
    <strong about="v-s:Attention" property="rdfs:label"></strong> <span about="v-s:NoRightsForOperation" property="rdfs:label"></span>
    <button class="btn btn-default" about="v-fc:Back" property="rdfs:label" onclick="window.history.back();"></button>
  </div>
</div>
<script>
  var self = individual,
      objectContainer = $("#object-container", template),
      object = self.object;

  var _class = object["rdf:type"][0];
  if (_class.rights.hasValue("v-s:canCreate", true)) {
    var objectTemplate = object.present(objectContainer, _class.id === "v-fc:Blank" ? "v-fc:CreateBlankTemplate" : undefined, "edit");
    $("#cancel.action", objectTemplate).click(function () {
      window.history.back();
    });
    objectTemplate.one("save", saveHandler);
  } else {
    $("#no-rights", template).removeClass("hidden");
  }
  function saveHandler () {
    if (location.hash.indexOf(self.id) === 2) {
      setTimeout(function () {
        riot.route("#/" + object.id);
      }, 250);
    }
  }
  //# sourceURL=v-fc:BlankTemplate
</script>
  """
.

v-fc:EnterLabel
  rdf:type v-s:Bundle ;
  rdfs:label "Введите название"@ru ;
  rdfs:label "Enter label"@en ;
.
v-fc:SavePersonalBlank
  rdf:type v-s:Bundle ;
  rdfs:label "Сохранить личный бланк"@ru ;
  rdfs:label "Save personal blank"@en ;
.
v-fc:UpdatePersonalBlank
  rdf:type v-s:Bundle ;
  rdfs:label "Обновить личный бланк"@ru ;
  rdfs:label "Update personal blank"@en ;
.
v-fc:BlankSuccessfullySaved
  rdf:type v-s:Bundle ;
  rdfs:label "Бланк успешно сохранен"@ru ;
  rdfs:label "Blank successfully saved"@en ;
.
v-fc:BlankSuccessfullyUpdated
  rdf:type v-s:Bundle ;
  rdfs:label "Бланк успешно обновлен"@ru ;
  rdfs:label "Blank successfully updated"@en ;
.
v-fc:BlankSuccessfullyDeleted
  rdf:type v-s:Bundle ;
  rdfs:label "Бланк успешно удален"@ru ;
  rdfs:label "Blank successfully deleted"@en ;
.
v-fc:Back
  rdf:type v-s:Bundle ;
  rdfs:label "Назад"@ru ;
  rdfs:label "Back"@en ;
.

v-fc:CreateManagementTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон класса v-fc:Create"@ru ;
  rdfs:label "v-fc:Create class template"@en ;
  v-ui:forClass v-fc:Blank ;
  v-ui:template """
<script>
  var notify = new veda.Notify();

  if ( !individual.hasValue("v-s:creator", veda.appointment || veda.user) ) {
    $(".action.save-create", template).click(function () {
      var personalLabel = prompt( new veda.IndividualModel("v-s:EnterLabel").toString(), individual.toString() );
      if (!personalLabel) { return; }
      var personalCreate = individual.clone();
      personalCreate["rdf:type"] = [ new veda.IndividualModel("v-fc:PersonalCreate") ];
      personalCreate["v-s:creator"] = [];
      personalCreate["v-s:created"] = [];
      personalCreate["rdfs:isDefinedBy"] = [];
      personalCreate["rdfs:label"] = [ personalLabel ];
      var createBlank = individual.hasValue("v-fc:hasBlank") ? individual["v-fc:hasBlank"][0] : undefined;
      if (createBlank && createBlank.object) {
        var personalCreateBlank = createBlank.clone();
        personalCreate["rdfs:isDefinedBy"] = [];
        personalCreate["v-fc:hasBlank"] = [ personalCreateBlank ];
        personalCreateBlank.object = createBlank.object;
        personalCreateBlank.updateBlank();
        personalCreateBlank.save();
      }
      personalCreate.save();
      var aspect = veda.user.aspect;
      aspect.addValue("v-s:hasCreate", personalCreate);
      aspect.save();
      notify("success", { message: new veda.IndividualModel("v-fc:BlankSuccessfullySaved").toString() });
    });
  } else {
    $(".action.save-create", template).remove();
  }

  if ( individual.rights.hasValue("v-s:canUpdate", true) ) {
    $(".action.update-create", template).click(function () {
      var createBlank = individual.hasValue("v-s:hasBlank") ? individual["v-s:hasBlank"][0] : undefined;
      if (createBlank && createBlank.object) {
        createBlank.updateBlank();
        createBlank.save();
      }
      notify("success", { message: new veda.IndividualModel("v-fc:BlankSuccessfullyUpdated").toString() });
    });
  } else {
    $(".action.update-create", template).remove();
  }
  if ( individual.rights.hasValue("v-s:canDelete", true) ) {
    $(".action.delete-create", template).click(function () {
      var aspect = veda.user.aspect;
      aspect.removeValue("v-s:hasCreate", individual);
      aspect.save();
      notify("success", { message: new veda.IndividualModel("v-fc:BlankSuccessfullyDeleted").toString() });
      template.trigger("delete");
      window.history.back();
    });
  } else {
    $(".action.delete-create", template).remove();
  }
//# sourceURL=v-fc:CreateManagementTemplate_pre
</script>
<div>
  <div class="container sheet">
    <div class="ribbon-wrapper top-left">
      <div class="ribbon top-left success" about="v-fc:CreateBundle" property="rdfs:label"></div>
    </div>
    <div class="actions text-right">
      <button class="action save-create btn btn-success" about="v-fc:SavePersonalBlank" property="rdfs:label"></button>
      <button class="action update-create btn btn-success" about="v-fc:UpdatePersonalBlank" property="rdfs:label"></button>
      <button class="action delete-create btn btn-link" about="v-s:Delete" property="rdfs:label"></button>
    </div>
  </div>
  <div about="@" rel="v-fc:hasBlank" data-template="v-fc:BlankTemplate"></div>
</div>
  """
.

# ------------------------------------------------------------ УПРАВЛЕНИЕ ПРАВАМИ --

v-fc:Blank_permission1
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-fc:Blank ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  rdfs:label "C. Все пользователи. Класс v-fc:Blank" ;
.

v-fc:Create_permission1
  rdf:type v-s:PermissionStatement ;
  v-s:permissionObject v-fc:PersonalCreate ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  rdfs:label "C. Все пользователи. Класс v-fc:Create" ;
.
