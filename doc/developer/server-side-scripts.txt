Платформа Veda. 
Серверные скрипты.

Cерверная часть платформы, имеет возможность исполнения по событию, заранее внесенного в систему скрипта. 
Скрипты исполняются в момент когда произошло обновления индивида.

Есть два пути внесения в систему необходимых скриптов: 

1. Создать индивида с типом v-s:Event:
В поле v-s:script,  записывается непосредственно код скрипта,
поле v-s:triggerByType дает возможность отфильтровать события по измерению индивидов только определенного типа.

пример:

cfg:Event_Notify_Task
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт уведомления о новой задаче" ;
  v-s:triggerByType v-wf:UserTaskForm ;
  v-s:script """
    var task_id = document["@"],
    to = getUri(document["v-wf:to"]);
    print("cfg:Event_17", "caught", "task", task_id, "to", to);
  """ ;
.

2. Второй способ внесения в систему скриптов это размещения кода в файловой системе в папке ./public/js. 
   Однако такие скрипты невозможно привязать к событиям обновления индивида, но их можно вызвать из v-s:Event. 
   Разработчик имеет возможность сформировать базовый набор утилит для последующего использования в индивидах типа v-s:Event.


Особенности исполнения скриптов:

По сути скрипт в v-s:Event это аналог триггера в SQL, вернуть он ничего не может,
но в нем можно создать или изменить любой индивид.

При исполнении скрипта, ему передаются ряд предустановленных переменных:

* ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.

! prev_state состояние обьекта до момента изменения обьекта, если требуется актуальное состояние то следует считать обьект самостоятельно
! всем скриптам исполняемым в рамках события изменения индивида, подается одно и тоже состояние prev_state

При сохранении индивида будут выполнены все скрипты которые проходят по фильтру v-s:triggerByType для типа этого индивида.
Порядок исполнения скриптов не регулируется. Исполнение скрипта может повлечь за собой новое исполнение скриптов,
так как в теле кода могут располагаться команды на создание или обновление индивидов. Однако сохранение новых и измененных
индивидов будет произведено только после того как отработают все скрипты по первоначальному событию. 
Соответственно вложенные скрипты будут вызваны только после того как сохраняться результаты работы родительского скрипта.
В самом исполняемом скрипте можно узнать откуда его вызвали если обратится к переменной parent_script_id. Соответственно,
в переменной parent_document_id будет содержатся id индивида в результате обработки которого был вызван вложенный скрипт.


Поток исполнения:

Модифицированные индивиды и вновь созданные, veda складывает в одну очередь, которая затем обрабатывается различными частями системы.
Для скриптов этот поток данных делится на три части, которые обрабатываются тремя машинами V8 отвечающими за исполнение js скриптов.

Каждая из машин V8 обрабатывает свою очередь и имеет независимый контекст, нужно учитывать что глобальные переменные созданные в одной из машин, будут не доступны в других.

Также нужно учесть что машины исполнения V8 не равноценны по приоритетам, используются три фиксированные очереди исполнения скриптов: lp0 и lp1 - низкоприоритетные и main - высокоприоритетная.

Исполнение в очередях lp0 и lp1 не может обгонять исполнение очереди main, то есть обработка индивида в низко приоритетных очередях
будет выполнена после того как будет завершена обработка этого индивида в высоко приоритетной очереди.

Для указания в какой из очередей скрипт должен исполняться, задается предикатом [v-s:runAt] :
v-s:runAt "V8.LowPriority" для очереди lp0, v-s:runAt "V8.LowPriority1" для очереди lp1. Отсутствие предиката v-s:runAt для скрипта говорит о том что данный скрипт должен 
исполнятся в очереди main.

Для предотвращения ситуаций перепутывания порядка исполнения скриптов, используется правило: индивиды порожденные в очереди X, в дальнейшем будут обработаны в ней же.

Также можно указать для конкретного индивида, где он должен быть обработан, но это действует только для индивидов созданных пользователем, а не скриптом.

псевдокод этого алгоритма:

vm_id = id машины исполнения скриптов (V8.LowPriority/V8.LowPriority1/main)
indv_run_at = обрабатываемый_индивид.getFirstLiteral("v-s:runAt");

цикл по скриптам
{
		script_run_at = скрипт.getFirstLiteral("v-s:runAt");

                if (обрабатываемый_индивид создан пользователем (а не скриптом) == true)
                {
                    if (indv_run_at !is null && indv_run_at != vm_id)
                        continue;
                    else if (indv_run_at is null && script_run_at != vm_id)
                        continue;
                }

	исполнение скрипта
}

сохранение результатов


