Серверные скрипты платформы Veda.

Одна из возможностей серверной части платформы это исполнение заранее внесенного в систему скрипта. 
Скрипты исполняются в момент обновления индивида.
Есть два пути внесения в систему необходимых скриптов: 

1. Создать индивида с типом v-s:Event:
В поле v-s:script,  записывается непосредственно код скрипта,
поле v-s:triggerByType дает возможность отфильтровать события по измерению индивидов только определенного типа.

пример:

cfg:Event_Notify_Task
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт уведомления о новой задаче" ;
  v-s:triggerByType v-wf:UserTaskForm ;
  v-s:script """
var task_id = document["@"],
    to = getUri(document["v-wf:to"]);
print("cfg:Event_17", "caught", "task", task_id, "to", to);
  """ ;
.

2. Второй способ внесения в систему скриптов это размещения кода в файловой системе в папке ./public/js. 
   Однако такие скрипты невозможно привязать к событиям обновления индивида, но их можно вызвать из v-s:Event. 
   Обычно такие скрипты формируют базовый набор утилит для последующего использования в индивидах типа v-s:Event.


Особенности исполнения скриптов:

По сути скрипт в v-s:Event это аналог триггера в SQL, вернуть он ничего не может,
но в нем можно создать или изменить любой индивид.

При исполнении скрипта, ему передаются ряд предустановленных переменных:

* ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.

При сохранении индивида будут выполнены все скрипты которые проходят по фильтру v-s:triggerByType для типа этого индивида. 
Порядок исполнения скриптов не регулируется. Исполнение скрипта может повлечь за собой новое исполнение скриптов,
так как в теле кода могут располагаться команды на создание или обновление индивидов. Однако сохранение новых и измененных 
индивидов будет произведено только после того как отработают все скрипты по первоначальному событию. 
Соответственно вложенные скрипты будут вызваны только после того как сохраняться результаты работы родительского скрипта. 
В самом исполняемом скрипте можно узнать откуда его вызвали если обратится к переменной parent_script_id. Соответственно, 
в переменной parent_document_id будет содержатся id индивида в результате обработки которого был вызван вложенный скрипт.
